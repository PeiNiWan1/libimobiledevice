name: build

on:
  push:
  pull_request:
  schedule:
    - cron: '0 0 1 * *'
  workflow_dispatch:
    inputs:
      env:
        description: "运行环境"
        required: true
        default: "production"
jobs:
 
  build-windows:
    runs-on: windows-latest
    defaults:
      run:
        shell: msys2 {0}
    strategy:
      fail-fast: false
      matrix:
        include: [
          { msystem: MINGW64, arch: x86_64 },
          { msystem: MINGW32, arch: i686   }
          ]
    steps:
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{ matrix.msystem }}
        release: false
        update: false
        install: >-
          base-devel
          git
          mingw-w64-${{ matrix.arch }}-gcc
          mingw-w64-${{ matrix.arch }}-pkg-config
          mingw-w64-${{ matrix.arch }}-openssl
          make
          libtool
          autoconf
          automake-wrapper

    - name: prepare environment
      run: |
        dest=`echo ${{ matrix.msystem }} | tr [:upper:] [:lower:]`   # mingw64/mingw32
        echo "dest=$dest" >> $GITHUB_ENV
        echo "target_triplet=`gcc -dumpmachine`" >> $GITHUB_ENV
        git config --global core.autocrlf false
    - name: fetch libplist
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libplist-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libplist

    - name: fetch libusbmuxd
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libusbmuxd-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libusbmuxd

    - name: fetch libimobiledevice-glue
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libimobiledevice-glue-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libimobiledevice-glue

    - name: fetch libtatsu
      uses: dawidd6/action-download-artifact@v6
      with:
        github_token: ${{secrets.GITHUB_TOKEN}}
        workflow: build.yml
        name: libtatsu-latest_${{ matrix.arch }}-${{ env.dest }}
        repo: libimobiledevice/libtatsu

    
    - name: install external dependencies (static-only prefix)
      run: |
        mkdir -p /opt/${{ env.dest }}
        mkdir extract
        for I in *.tar; do
          tar -C extract -xvf $I
        done
       
        cp -r extract/${{ env.dest }}/* /opt/${{ env.dest }}/
     
        find /opt/${{ env.dest }}/lib -name "*.dll.a" -delete || true
        find /opt/${{ env.dest }}/bin -name "*.dll" -delete || true
       
        echo "PKG_CONFIG_PATH=/opt/${{ env.dest }}/lib/pkgconfig" >> $GITHUB_ENV
        echo "CFLAGS=-I/opt/${{ env.dest }}/include" >> $GITHUB_ENV
        echo "CPPFLAGS=-I/opt/${{ env.dest }}/include" >> $GITHUB_ENV
        echo "LDFLAGS=-L/opt/${{ env.dest }}/lib" >> $GITHUB_ENV

    - uses: actions/checkout@v4


    - name: autogen (static libimobiledevice, deps from /opt/* only)
      run: |
        ./autogen.sh CC=gcc CXX=g++ \
          --enable-debug \
          --enable-static --disable-shared \
          PKG_CONFIG_PATH="$PKG_CONFIG_PATH"


    - name: make
      run: make V=1

    - name: make install
      run: make install

    - name: prepare artifact
      run: |
        mkdir -p dest
        DESTDIR=`pwd`/dest make install
        tar -C dest -cf libimobiledevice.tar ${{ env.dest }}

    - name: publish artifact
      uses: actions/upload-artifact@v4
      with:
        name: libimobiledevice-latest_${{ matrix.arch }}-${{ env.dest }}
        path: libimobiledevice.tar
